/**
 * jQuery插件，倒计时显示时间
 * @param {Object} options - 配置选项
 * @param {string} options.date - 结束时间，格式为"12/24/2012 12:00:00"
 * @param {number} [options.offset] - 时间偏移量，单位为秒，默认为null
 * @param {function} [callback] - 倒计时结束时的回调函数
 * @returns {jQuery} 返回jQuery对象
 */
$.fn.downCount = function(options, callback) {
    // 合并默认配置和传入的配置
    var settings = $.extend({
        date: null,
        offset: null
    }, options);
    // 如果结束时间未定义或格式不正确，则抛出错误
    if (!settings.date) {
        $.error("Date is not defined.");
    }
    if (!Date.parse(settings.date)) {
        $.error("Incorrect date format, it should look like this, 12/24/2012 12:00:00.");
    }
    // 保存jQuery对象
    var container = this;
    // 定时器，每秒更新倒计时
    var timer = setInterval(function() {
        var now = new Date();
        var distance = Date.parse(settings.date) - now + (settings.offset * 1000 || 0);
        // 如果倒计时结束，则清除定时器并执行回调函数
        if (distance <= 0) {
            clearInterval(timer);
            if (callback && typeof callback === "function") {
                callback();
            }
        } else {
            // 计算剩余时间并更新显示
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);
            days = (days >= 10) ? days : "0" + days;
            hours = (hours >= 10) ? hours : "0" + hours;
            minutes = (minutes >= 10) ? minutes : "0" + minutes;
            seconds = (seconds >= 10) ? seconds : "0" + seconds;
            container.find(".days").text(days);
            container.find(".hours").text(hours);
            container.find(".minutes").text(minutes);
            container.find(".seconds").text(seconds);
        }
    }, 1000);
    // 重置倒计时
    this.reset = function() {
        clearInterval(timer);
        container.find(".days").text("00");
        container.find(".hours").text("00");
        container.find(".minutes").text("00");
        container.find(".seconds").text("00");
    };
    return this;
};
/**
 * 显示一个Toast提示框
 * @param {string} message - 提示信息
 * @param {number} duration - 显示时间，单位为毫秒，默认为2500
 */
$.toast = function(message, duration) {
    // 移除已有的提示框
    $("#toast").remove();
    // 创建提示框元素
    var toast = $("<div id='toast'/>");
    var icon = $("<img src='/assets/success.svg'/>");
    var body = $("body");
    toast.append(icon);
    body.append(toast);
    toast.append(message);
    // 显示提示框
    toast.fadeIn();
    // 指定时间后隐藏提示框
    setTimeout(function() {
        toast.fadeOut();
    }, duration || 2500);
};
/**
 * 工具函数，获取URL中的查询参数
 * @param {string} name - 查询参数名
 * @returns {string|null} 返回查询参数值，如果不存在则返回null
 */
var Utils = {
    getQueryString: function(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg);
        if (r != null) {
            return decodeURIComponent(r[2]);
        }
        return null;
    }
};
/**
 * 主函数，初始化页面
 */
(function() {
    // 保存页面元素和数据
    var countdown = null;
    var interval = null;
    var polling = null;
    var type = $("body").attr("data-type");
    var token = Utils.getQueryString("token");
    var timeout = $("body").attr("endTime");
    var redirectUrl = $("body").attr("data-redirect");
    var apiUrl = window.location.origin + "/api/queryOrder";
    // 定义页面功能函数
    var functions = {
        // 初始化语言选择器
        initLanguageSelector: function() {
            $("#lang").on("change", function(event) {
                var locale = $(this).val();
                var origin = window.location.origin;
                var pathname = window.location.pathname;
                var token = Utils.getQueryString("token");
                window.location.replace(origin + pathname + "?token=" + token);
            });
            var locale = Utils.getQueryString("locale") || "zh-CN";
            $("#lang").val(locale);
        },
        // 初始化解析按钮
        initParseButton: function() {
            // 当点击类为"parse-action"的元素时，执行以下函数
            $(".parse-action").on("click", function(event) {
                // 获取该元素的"data-ref"属性值
                var target = $(this).attr("data-ref");
                // 获取该元素的"data-msg"属性值
                var message = $(this).attr("data-msg");
                // 如果存在"data-ref"属性值
                if (target) {
                    // 获取该属性值对应的元素
                    var input = $(target);
                    // 选中该元素的文本
                    input.select();
                    // 如果该元素支持setSelectionRange方法，则将光标移动到文本末尾
                    if (input.setSelectionRange) {
                        input.setSelectionRange(0, input.val().length);
                    }
                    // 执行复制操作
                    document.execCommand("Copy");
                    // 显示消息提示框，并在2.5秒后自动关闭
                    $.toast(message, 2500);
                }
            });
        },
        // 检查交易状态
        checkTransactionStatus: function() {
            if (token) {
                var poll = function() {
                    $.ajax({
                        type: "get",
                        url: apiUrl,
                        data: {
                            token: token
                        },
                        success: function(response) {
                            if (response.code == 200 && response.status === true) {
                                clearInterval(polling);
                                if (countdown) {
                                    countdown.reset();
                                }
                                if (interval) {
                                    clearInterval(interval);
                                }
                                if (redirectUrl) {
                                    setTimeout(function() {
                                        window.location.replace(redirectUrl);
                                    }, 1500);
                                } else {
                                    window.location.href = "/pay/success";
                                }
                            }
                        }
                    });
                };
                polling = setInterval(function() {
                    poll();
                }, 3000);
            }
        },
        // 初始化倒计时
        initCountdown: function() {
            if (type === "pc" && timeout) {
                try {
                    countdown = $(".downcount").downCount({
                        date: timeout,
                        offset: 10
                    }, function() {
                        window.location.href = "/pay/timeout";
                    });
                } catch (error) {}
            }
        },
        // 检测支付超时（移动端）
        checkTimeout: function() {
            if (type === "mobile" && timeout) {
                interval = setInterval(function() {
                    if (new Date().getTime() > Date.parse(timeout)) {
                        clearInterval(interval);
                        window.location.href = "/pay/timeout";
                    }
                }, 1000);
            }
        },
        // 初始化页面
        init: function() {
            functions.initLanguageSelector();
            functions.initParseButton();
            functions.checkTransactionStatus();
            functions.initCountdown();
            functions.checkTimeout();
        }
    };
    // 调用初始化函数
    functions.init();
})();